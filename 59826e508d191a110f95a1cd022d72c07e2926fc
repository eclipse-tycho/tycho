{
  "comments": [
    {
      "key": {
        "uuid": "8f751f6a_86ea82d6",
        "filename": "tycho-core/src/main/java/org/eclipse/tycho/core/osgitools/DependencyComputer.java",
        "patchSetId": 13
      },
      "lineNbr": 109,
      "author": {
        "id": 1197
      },
      "writtenOn": "2021-01-29T21:38:37Z",
      "side": 1,
      "message": "In most cases this is going to be fine I suspect.  But in the case of a substituted export this is going to be wrong because the wiring for the revision (or in the case of a fragment the wiring of the host) will end up not having the provided capability.\n\nHere is some code that I think does mostly the same thing you are trying to do here, but perhaps more simple (in the eye of the beholder):\n\nhttps://github.com/eclipse/rt.equinox.bundles/blob/master/bundles/org.eclipse.equinox.console/src/org/eclipse/equinox/console/commands/EquinoxCommandProvider.java#L1684-L1759",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ab807d5_9d375a7b",
        "filename": "tycho-core/src/main/java/org/eclipse/tycho/core/osgitools/DependencyComputer.java",
        "patchSetId": 13
      },
      "lineNbr": 109,
      "author": {
        "id": 587
      },
      "writtenOn": "2021-01-30T15:11:00Z",
      "side": 1,
      "message": "So basically, you think all of `addVisiblePackagesFromState` and the methods it calls could be replaced by similar code as what you link here? If so, I\u0027m going to try it.",
      "parentUuid": "8f751f6a_86ea82d6",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88d78beb_1ceba57f",
        "filename": "tycho-core/src/main/java/org/eclipse/tycho/core/osgitools/DependencyComputer.java",
        "patchSetId": 13
      },
      "lineNbr": 109,
      "author": {
        "id": 1197
      },
      "writtenOn": "2021-02-01T21:20:26Z",
      "side": 1,
      "message": "Correct, if I was following the code correctly it seemed to be finding the sources to all the visible packages from a Wiring of a bundle.  That is also what the code is doing that I pointed you to from the EquinoxCommandProvider.",
      "parentUuid": "4ab807d5_9d375a7b",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "798a6d41_ca1fdf6c",
        "filename": "tycho-core/src/main/java/org/eclipse/tycho/core/osgitools/EquinoxResolver.java",
        "patchSetId": 13
      },
      "lineNbr": 88,
      "author": {
        "id": 1197
      },
      "writtenOn": "2021-01-29T21:38:37Z",
      "side": 1,
      "message": "I\u0027m not sure I follow what is being done here for fragments and uninstalling them.  Main question is why do you need to remove them?",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15b661ff_b988798e",
        "filename": "tycho-core/src/main/java/org/eclipse/tycho/core/osgitools/EquinoxResolver.java",
        "patchSetId": 13
      },
      "lineNbr": 88,
      "author": {
        "id": 587
      },
      "writtenOn": "2021-01-30T12:22:08Z",
      "side": 1,
      "message": "In Tycho, at build time, we explicitly don\u0027t want fragment to participate to classpath and dependency resolution for their host.",
      "parentUuid": "798a6d41_ca1fdf6c",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb4240c4_b8c19f20",
        "filename": "tycho-core/src/main/java/org/eclipse/tycho/core/osgitools/EquinoxResolver.java",
        "patchSetId": 13
      },
      "lineNbr": 88,
      "author": {
        "id": 1197
      },
      "writtenOn": "2021-02-01T21:20:26Z",
      "side": 1,
      "message": "But are there not many cases where the fragment is required for a successful compilation, let alone a successful resolution?  One prominent case I thought was SWT where the classes are all in the platform specific fragment.",
      "parentUuid": "15b661ff_b988798e",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "897b60f3_892113d8",
        "filename": "tycho-core/src/main/java/org/eclipse/tycho/core/osgitools/EquinoxResolver.java",
        "patchSetId": 13
      },
      "lineNbr": 88,
      "author": {
        "id": 587
      },
      "writtenOn": "2021-02-02T08:16:01Z",
      "side": 1,
      "message": "We have no known case where fragment are required for compilation AFAIK.\nSWT is built the other way round: all sources are in the same bundle, and the platform-specific artifacts are derived from that bundle. The native parts (in fragments) are not necessary at build-time.\nSome pre-existing tests in Tycho have verified the behavior that fragments are excluded from resolution when building their host; and some other verify that if the dependencies includes a host, then the fragment are added transitively.",
      "parentUuid": "eb4240c4_b8c19f20",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8207948_5c1a8535",
        "filename": "tycho-core/src/main/java/org/eclipse/tycho/core/osgitools/EquinoxResolver.java",
        "patchSetId": 13
      },
      "lineNbr": 209,
      "author": {
        "id": 1197
      },
      "writtenOn": "2021-01-29T21:38:37Z",
      "side": 1,
      "message": "It is unfortunate that you have to return empty implementations here.  In retrospect these methods could not been abstract and returned the do nothing impls.  On the other hand that would place classes in the framework to implement do nothing hooks that never are used by the framework itself.",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca40a2ad_52203a85",
        "filename": "tycho-core/src/main/java/org/eclipse/tycho/core/osgitools/OsgiManifest.java",
        "patchSetId": 13
      },
      "lineNbr": 43,
      "author": {
        "id": 1197
      },
      "writtenOn": "2021-01-29T21:38:37Z",
      "side": 1,
      "message": "I see you were using the x-internal export of org.eclipse.osgi.framework.util to get the case-insensitive Headers implementation.  If you are OK still using that package org.eclipse.osgi.framework.util but don\u0027t want deprecation warnings you could use org.eclipse.osgi.framework.util.CaseInsensitiveDictionaryMap instead.  Otherwise you will need to implement your own case insensitive Map, or just copy org.eclipse.osgi.framework.util.CaseInsensitiveDictionaryMap into tycho if you want.",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23a4155d_811f0756",
        "filename": "tycho-core/src/main/java/org/eclipse/tycho/core/osgitools/OsgiManifest.java",
        "patchSetId": 13
      },
      "lineNbr": 43,
      "author": {
        "id": 587
      },
      "writtenOn": "2021-01-30T12:22:08Z",
      "side": 1,
      "message": "I think it\u0027s fine going to plain Manifest and case-sensitive headers. Do you see a reason why case-insensitive headers should be prefer? Are OSGi Headers case-insensitive at runtime in Equinox?",
      "parentUuid": "ca40a2ad_52203a85",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc5dd282_bcaa10b9",
        "filename": "tycho-core/src/main/java/org/eclipse/tycho/core/osgitools/OsgiManifest.java",
        "patchSetId": 13
      },
      "lineNbr": 43,
      "author": {
        "id": 1197
      },
      "writtenOn": "2021-02-01T21:20:26Z",
      "side": 1,
      "message": "Yes, unfortunately OSGi specifies case-insensitive headers: \nhttps://docs.osgi.org/javadoc/osgi.core/8.0.0/org/osgi/framework/Bundle.html#getHeaders--\n\nI wish it was not true.  Way back in the beginning of OSGi the spec writers thought it would be nice to be forgiving because they imagined developers using primitive tool to author bundle manifests.",
      "parentUuid": "23a4155d_811f0756",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56bba075_e151de87",
        "filename": "tycho-core/src/main/java/org/eclipse/tycho/core/osgitools/OsgiManifest.java",
        "patchSetId": 13
      },
      "lineNbr": 43,
      "author": {
        "id": 587
      },
      "writtenOn": "2021-02-02T08:08:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc5dd282_bcaa10b9",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09912c81_631a310e",
        "filename": "tycho-core/src/test/java/org/eclipse/tycho/core/test/TychoTest.java",
        "patchSetId": 13
      },
      "lineNbr": 131,
      "author": {
        "id": 1197
      },
      "writtenOn": "2021-01-29T21:38:37Z",
      "side": 1,
      "message": "Having a hard time following this change.  At first glance it seems to test for some order, but perhaps is a bit more lenient than the original order test?",
      "range": {
        "startLine": 126,
        "startChar": 1,
        "endLine": 131,
        "endChar": 0
      },
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be1a3150_e3ffae83",
        "filename": "tycho-core/src/test/java/org/eclipse/tycho/core/test/TychoTest.java",
        "patchSetId": 13
      },
      "lineNbr": 131,
      "author": {
        "id": 587
      },
      "writtenOn": "2021-01-30T12:22:08Z",
      "side": 1,
      "message": "IIRC, there was an issue with that test: the resolution order was slightly different, yet correct. This set of bundles were able to resolve in different correct orders and the change made switch from 1 correct order to another correct order.",
      "parentUuid": "09912c81_631a310e",
      "range": {
        "startLine": 126,
        "startChar": 1,
        "endLine": 131,
        "endChar": 0
      },
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8f1b2f9_23fe0f69",
        "filename": "tycho-core/src/test/java/org/eclipse/tycho/core/test/TychoTest.java",
        "patchSetId": 13
      },
      "lineNbr": 131,
      "author": {
        "id": 1197
      },
      "writtenOn": "2021-02-01T21:20:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "be1a3150_e3ffae83",
      "range": {
        "startLine": 126,
        "startChar": 1,
        "endLine": 131,
        "endChar": 0
      },
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1de755d_497de2dc",
        "filename": "tycho-core/src/test/resources/manifests/classpath.mf",
        "patchSetId": 13
      },
      "lineNbr": 6,
      "author": {
        "id": 1197
      },
      "writtenOn": "2021-01-29T21:38:37Z",
      "side": 1,
      "message": "I hope you didn\u0027t have to do this because now tycho will be case sensitive.  That will likely cause you some unhappy users.",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c465f37_560acb24",
        "filename": "tycho-core/src/test/resources/manifests/classpath.mf",
        "patchSetId": 13
      },
      "lineNbr": 6,
      "author": {
        "id": 587
      },
      "writtenOn": "2021-01-30T12:22:08Z",
      "side": 1,
      "message": "Yes, I changed this because OsgiManifest is now case sensitivity. But the question is whether OSGi is actually case sensitive or not. Tycho should just do like OSGi and not less/more on that topic.",
      "parentUuid": "e1de755d_497de2dc",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "334b0866_eec524f0",
        "filename": "tycho-core/src/test/resources/manifests/classpath.mf",
        "patchSetId": 13
      },
      "lineNbr": 6,
      "author": {
        "id": 587
      },
      "writtenOn": "2021-02-02T08:08:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0c465f37_560acb24",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "923aaba2_be65d3fa",
        "filename": "tycho-its/projects/resolver.extraRequirements/fragment-split-package/fragment/META-INF/MANIFEST.MF",
        "patchSetId": 13
      },
      "lineNbr": 5,
      "author": {
        "id": 1197
      },
      "writtenOn": "2021-01-29T21:38:37Z",
      "side": 1,
      "message": "I\u0027m curious why the mandatory directive and attribute was removed here.  The mandatory directive should work with the ModuleContainer during resolution.",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15cc8dc7_f45df152",
        "filename": "tycho-its/projects/resolver.extraRequirements/fragment-split-package/fragment/META-INF/MANIFEST.MF",
        "patchSetId": 13
      },
      "lineNbr": 5,
      "author": {
        "id": 587
      },
      "writtenOn": "2021-01-30T12:22:08Z",
      "side": 1,
      "message": "The test was kind of erroneous in my understanding: the mandatory flag was set, but the Import-Package in the client bundle wasn\u0027t setting any property, so this fragment wasn\u0027t wired to the consumer.\nUnless I\u0027m mistaken, this test was wrong in 1st place as the fragment package should have been available with this mandatory settings. If you can review the test (from master HEAD commit before this change) and confirm/infirm my understanding, that would be welcome!",
      "parentUuid": "923aaba2_be65d3fa",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "088c7cb4_55c0279c",
        "filename": "tycho-its/projects/resolver.extraRequirements/fragment-split-package/fragment/META-INF/MANIFEST.MF",
        "patchSetId": 13
      },
      "lineNbr": 5,
      "author": {
        "id": 1197
      },
      "writtenOn": "2021-02-01T21:20:26Z",
      "side": 1,
      "message": "I see, so `split` is a package split between the host and one of its fragment bundles and the client just does a simple import without using the mandatory matching attribute.  The testcase seems to confirm that the client bundle can compile a reference to a class coming from the fragment.  Seems like a reasonable testcase.  But did this mandatory directive and attribute on the fragment export make the test fail?\n\nAt runtime these three bundles would resolve and the client would get wired to the capability for the split package as specified by the host.  But the host class loader will have visibility to the classes from the host bundle + its attached fragments (regardless of if the fragment exports the package or not).  So the use of the mandatory directive really is meaningless in the testcase because regardless of which capability the client gets wired both package capabilities should be hosted by the host ModuleWiring object.  So it should not matter if the fragment exports the package at all, or with a mandatory directive or not.  If the testcase is failing with this directive then something seems to be wrong.",
      "parentUuid": "15cc8dc7_f45df152",
      "revId": "59826e508d191a110f95a1cd022d72c07e2926fc",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    }
  ]
}